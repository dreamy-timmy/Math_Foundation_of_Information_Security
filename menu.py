from lab2 import comparison_solver, comparison_system_solver, euclid_extended
import lab2
from lab1 import Caesar, given_var
import lab3
import lab4
import lab5
import lab6
import lab7

def Menu():
    exit = False
    while (not exit):
        print('------------------------------------------------------------------------------------------------')
        main_menu = int(input("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ö—É–¥–∞ –ø–æ–∂–µ–ª–∞–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑? \n1) –ü–µ—Ä–≤–∞—è –ª–∞–±–∞ \
                               \n2) –í—Ç–æ—Ä–∞—è –ª–∞–±–∞ \
                               \n3) –¢—Ä–µ—Ç—å—è –ª–∞–±–∞ \
                              \n4) –ß–µ—Ç–≤—ë—Ä—Ç–∞—è –ª–∞–±–∞ \
                              \n5) –ü—è—Ç–∞—è –ª–∞–±–∞ \
                              \n6) –®–µ—Å—Ç–∞—è –ª–∞–±–∞ \
                              \n7) –°–µ–¥—å–º–∞—è –ª–∞–±–∞ \
                              \n8) –î–æ–º–æ–π\n\n"))

        

        def first_lab():
            menu_option = int(input("–í—ã—Å–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –≤–æ–ª–µ–∏–∑–≤–æ–ª–µ–Ω–∏–µ: \n1) –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤–∞—è –ª–∞–±–∞), \n2) –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤–∞—è ), \n3) –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ–∫—Å—Ç–∞, \n4) –í—ã–π—Ç–∏ –æ—Ç—Å—é–¥–∞ –ø–æ—Å–∫–æ—Ä–µ–µ\n"))
            print()
            c = Caesar()
            if menu_option == 1: c.encryption()
            elif menu_option == 2: c.decryption()
            elif menu_option == 3: given_var()
            else: 
                return 0
            
        def second_lab():
            menu_option = int(input("–í—ã—Å–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –≤–æ–ª–µ–∏–∑–≤–æ–ª–µ–Ω–∏–µ: \n1) –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –º–æ–¥—É–ª—é m,\
                            \n2) –†–µ—à–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∏–¥–∞:2 ax=b (mod m), \n3) –†–µ—à–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —Å—Ä–∞–≤–Ω–µ–Ω–∏–π –≤–∏–¥–∞ –ø–æ –º–æ–¥—É–ª—é m: ax+y=b, cx+y=d,\
                            \n4) –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, \n5) –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ–∫—Å—Ç–∞, \n6) –í—ã–π—Ç–∏ –æ—Ç—Å—é–¥–∞ –ø–æ—Å–∫–æ—Ä–µ–µ\n"))
            print()
            if menu_option == 1: 
                lab2.inverse_element_interface()
            elif menu_option == 2: 
                lab2.comparison_solver_interface()
            elif menu_option == 3: lab2.comparison_system_solver_interface()
            elif menu_option == 4: lab2.input_message_decryption()
            elif menu_option == 5: lab2.variant_case_decryption()
            
            else: 
                return 0
            
        def third_lab():
            menu_option = int(input("–í—ã—Å–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –≤–æ–ª–µ–∏–∑–≤–æ–ª–µ–Ω–∏–µ: \n1) –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ H_k/k –¥–ª—è k=1,...,5, \n2) –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ H_k/k –æ—Ç k, \n3) –í—ã–π—Ç–∏ –æ—Ç—Å—é–¥–∞ –ø–æ—Å–∫–æ—Ä–µ–µ\n"))
            print()
            
            if menu_option == 1: lab3.entropy_lang_norm_interface()
            elif menu_option == 2: lab3.display_graphic()
            else: 
                return 0
            
        def fourth_lab():
            exit_local = False
            p, q = lab4.p_q_input()
            while not exit_local:
                menu_option = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: \
                \n1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π \
                \n2. –í–≤–æ–¥ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–ª—é—á–µ–π –≤—Ä—É—á–Ω—É—é \
                \n3. –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü—ã –∫–ª—é—á–µ–π \
                \n4. –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è \
                \n5. –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è \
                \n6. –í—ã–π—Ç–∏\n"))
                print()
                print()

                if menu_option == 1: lab4.automatic_key_generation(p, q)
                elif menu_option == 2: lab4.open_keys_input(p, q)
                elif menu_option == 3: lab4.display_keys_table()
                elif menu_option == 4: lab4.encryption()
                elif menu_option == 5: lab4.decryption()
                else: 
                    exit_local = True

        def fifth_lab():
            menu_option = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: \
                \n1. –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–∏—Å–ª–∞ ùëõ –º–µ—Ç–æ–¥–æ–º –ø—Ä–æ–±–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è \
                \n2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–ª—é—á–∞ \
                \n3. –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è \
                \n4. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ \
                \n5. –í—ã–π—Ç–∏\n"))
            if menu_option == 1:
                lab5.trial_division_interface()
            elif menu_option == 2:
                lab5.private_key_search_interface()
            elif menu_option == 3:
                lab5.decrypt_message_interface()
            elif menu_option == 4:
                lab5.induvidual_var()
            else: 
                return 0
            
        def sixth_lab():
            menu_option = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: \
                \n1. –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–∏—Å–ª–∞ –º–µ—Ç–æ–¥–æ–º –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–≥–æ —Ä–µ—à–µ—Ç–∞ \
                \n2. –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–æ-–º–µ—Ç–æ–¥–æ–º \
                \n3. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ \
                \n4. –í—ã–π—Ç–∏\n"))
            if menu_option == 1:
                lab6.quadratic_sieve_fact_interface()
            elif menu_option == 2:
                lab6.rho_fact_interface()
            elif menu_option == 3:
                lab6.induvid_var()
            else:
                return 0

        def seventh_lab():
            menu_option = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: \
                \n1. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ–≥–∞—Ä–∏—Ñ–º–∞ –º–µ—Ç–æ–¥–æ–º '—à–∞–≥ –º–ª–∞–¥–µ–Ω—Ü–∞-—à–∞–≥ –≥–∏–≥–∞–Ω—Ç–∞' \
                \n2. –í—ã–π—Ç–∏\n"))
            if menu_option == 1:
                lab7.babyStep_giantStep_interface()
            else: 
                return 0

        if main_menu == 1: 
            main_menu = first_lab()
        elif main_menu == 2: 
            main_menu = second_lab()
        elif main_menu == 3: 
            main_menu = third_lab()
        elif main_menu == 4: 
            main_menu = fourth_lab()
        elif main_menu == 5: 
            main_menu = fifth_lab()
        elif main_menu == 6: 
            main_menu = sixth_lab()
        elif main_menu == 7:
            main_menu = seventh_lab()
        else: 
            exit = True
        # if main_menu == 0: break

Menu()
